#include "max_tree_c.hpp"
#include "tilling_c.hpp"
#include "utils.hpp"
#include "vector2D.cuh"
#include "attribute_compute_c.hpp"
#include "area_filtering_c.hpp"

int main() {
    /*
    int* data = new int[256]{
        1, 1, 2, 2, 3, 3, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 3, 2, 3, 4,
        5, 4, 2, 3, 2, 1, 0, 1, 1, 0, 2, 3, 4, 3, 4, 5, 6, 5, 3, 4, 3, 2,
        1, 2, 1, 1, 2, 3, 4, 3, 4, 6, 7, 6, 3, 5, 4, 3, 2, 3, 2, 2,

        1, 1, 2, 2, 3, 3, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 3, 2, 3, 4,
        5, 4, 2, 3, 2, 1, 0, 1, 1, 0, 2, 3, 4, 3, 4, 5, 6, 5, 3, 4, 3, 2,
        1, 2, 1, 1, 2, 3, 4, 3, 4, 6, 7, 6, 3, 5, 4, 3, 2, 3, 2, 2,

        0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6,
        7, 6, 5, 4, 3, 2, 1, 1, 1, 0, 2, 3, 4, 5, 6, 7, 7, 7, 6, 5, 4, 3,
        2, 2, 1, 1, 2, 3, 4, 5, 7, 7, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1,

        0, 0, 1, 2, 2, 3, 3, 4, 3, 3, 2, 2, 1, 1, 1, 0, 1, 1, 2, 3, 3, 4,
        4, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 2, 3, 4, 4, 5, 5, 6, 5, 5, 4, 4,
        3, 3, 3, 2, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 2, 1, 1, 1
    };
    */

    /*
    int* data = new int[256]{
    36, 36, 73, 73, 109, 109, 146, 146, 73, 73, 36, 36, 0, 0, 0, 0,
    36, 73, 109, 73, 109, 146, 182, 146, 73, 109, 73, 36, 0, 36, 36, 0,
    73, 109, 146, 109, 146, 182, 218, 182, 109, 146, 109, 73, 36, 73, 36, 36,
    73, 109, 146, 109, 146, 218, 255, 218, 109, 182, 146, 109, 73, 109, 73, 73,

    36, 36, 73, 73, 109, 109, 146, 146, 73, 73, 36, 36, 0, 0, 0, 0,
    36, 73, 109, 73, 109, 146, 182, 146, 73, 109, 73, 36, 0, 36, 36, 0,
    73, 109, 146, 109, 146, 182, 218, 182, 109, 146, 109, 73, 36, 73, 36, 36,
    73, 109, 146, 109, 146, 218, 255, 218, 109, 182, 146, 109, 73, 109, 73, 73,

    0, 36, 73, 109, 146, 182, 218, 255, 218, 182, 146, 109, 73, 36, 0, 0,
    36, 73, 109, 146, 182, 218, 255, 218, 182, 146, 109, 73, 36, 36, 36, 0,
    73, 109, 146, 182, 218, 255, 255, 255, 218, 182, 146, 109, 73, 73, 36, 36,
    73, 109, 146, 182, 255, 255, 255, 218, 182, 146, 109, 73, 36, 36, 36, 36,

    0, 0, 36, 73, 73, 109, 109, 146, 109, 109, 73, 73, 36, 36, 36, 0,
    36, 36, 73, 109, 109, 146, 146, 182, 146, 146, 109, 109, 73, 73, 73, 36,
    36, 73, 109, 146, 146, 182, 182, 218, 182, 182, 146, 146, 109, 109, 109, 73,
    36, 73, 109, 146, 182, 218, 218, 218, 182, 146, 109, 73, 73, 36, 36, 36
    };

    int rows = 16;
    int cols = 16;
    */

    /*
    int* data = new int[256]{
    255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   255, 255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
    };

    int rows = 16;
    int cols = 16;
    */

    int* data = new int[256]{
    255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    255, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 255,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
    };

    int rows = 16;
    int cols = 16;

    /*
    int rows;
    int cols;
    std::string path = "/mnt/c/Users/segur/epita/LRE-Axel/cuda/images/144p/144p_1.png";
    int *data = loadGrayImageAsVector(path, rows, cols);
    */

    Vector2D<int> f(rows, cols, data);
    matrixToImage(f, "originalImage.png");
    Vector2D<int> parent = tillingMaxtree(f);
    displayGraph(parent, f, "graph_canonized_ref");
    Vector2D<int> area = computeArea(parent);
    printVector2D(area);
    Vector2D<int> filteredImage = areaFiltering(f, parent, area, 3);
    printVector2D(f);
    printVector2D(filteredImage);
    matrixToImage(filteredImage, "filteredImage.png");

    return 0;
}